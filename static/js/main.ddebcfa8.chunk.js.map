{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","title_english","medium_cover_image","id","_getMovies","a","async","_callApi","setState","fetch","then","potato","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4UA8BA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAI1D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,0BAAMF,UAAU,gBAAgBE,GAoBzBC,MArDf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEtC,yBAAKC,UAAU,iBACX,4BAAKD,GACL,yBAAKC,UAAU,iBACVI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAEjE,yBAAKP,UAAU,mBACf,kBAAC,IAAD,CACIS,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC4EbC,E,2MAxFbC,MAAQ,G,EA4CRC,cAAgB,WAWd,OAVe,EAAKD,MAAME,OAAOX,KAAI,SAACY,GAEpC,OAAO,kBAAC,EAAD,CACLnB,MAAOmB,EAAMC,cACbvB,OAAQsB,EAAME,mBACdZ,IAAKU,EAAMG,GACXjB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAOtBiB,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACU,EAAKE,YADf,OACLR,EADK,OAEX,EAAKS,SAAS,CACZT,WAHS,sC,EAObQ,SAAW,WAET,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKd,UACvBe,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFApE1BG,KAAKd,e,+BAuEG,IACAL,EAAWmB,KAAKrB,MAAhBE,OACR,OACE,yBAAKjB,UAAWiB,EAAS,MAAQ,eAC9BmB,KAAKrB,MAAME,OAASmB,KAAKpB,gBAAkB,gB,GAjFlCqB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.ddebcfa8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>   \r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes ={\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie.js';\r\n\r\n// const movieTitles = []\r\n// const movieImages = []\r\n\r\nclass App extends Component {\r\n  // Render: componentWillMount() -> render() ->  componentDidMount()\r\n  // Updete: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\r\n  state = {}\r\n\r\n  componentDidMount() {\r\n    this._getMovies();\r\n    // fetch는 ajax를 url로 불러 올 수 있다.\r\n    \r\n    // setTimeout(() => {\r\n    //   // state를 변경하면 render() 메소드가 새로운 state와 함께 다시 동작한다.\r\n    //   this.setState({\r\n    //     movies: [\r\n    //       {\r\n    //         id: \"\",\r\n    //         title: \"Tunein for Love\",\r\n    //         releaseDate: \"2019.08.28\",\r\n    //         poster: \"https://img1.daumcdn.net/thumb/C155x225/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fmovie%2F582477f43a5143faa7a95290128596aa1565059580851\"\r\n    //       },\r\n    //       {\r\n    //         id: \"\",\r\n    //         title: \"Joker\",\r\n    //         releaseDate: \"2019.10.02\",\r\n    //         poster: \"https://img1.daumcdn.net/thumb/C155x225/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fmovie%2F0357a82b7226464b87072c0b8d2246b71567986846719\"\r\n    //       },\r\n    //       {\r\n    //         id: \"\",\r\n    //         title: \"KIM JI-YOUNG, BORN 1982\",\r\n    //         releaseDate: \"2019.10.23\",\r\n    //         poster: \"https://img1.daumcdn.net/thumb/C155x225/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fmovie%2Fcc7165f75bb94140a95d977881cebc191571895256827\"\r\n    //       },\r\n    //       {\r\n    //         id: \"\",\r\n    //         title: \"Frozen 2\",\r\n    //         releaseDate: \"2019.11.21\",\r\n    //         poster: \"https://img1.daumcdn.net/thumb/C155x225/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fmovie%2F5afd212b68e34e61a964d969dd898e2f1574298873981\"  \r\n    //       },\r\n    //       {\r\n    //         title: \"Toy Stroy 4\",\r\n    //         poster: \"https://img1.daumcdn.net/thumb/C155x225/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fmovie%2Fda2e6f0663514ba3aaf1f003733d08831560262646934\",\r\n    //         releaseDate: \"2019.06.20\"\r\n    //       }\r\n    //     ]\r\n    //   })\r\n    // }, 3000)\r\n  }\r\n \r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie) => {\r\n      // console.log(movie);\r\n      return <Movie\r\n        title={movie.title_english}\r\n        poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n      />\r\n    })\r\n    return movies\r\n  }\r\n\r\n  // async: 순서와 상관없이 작업이 진행(비동기)\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi()\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n    // return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=rating')\r\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\r\n    .then(potato => potato.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App-loading\"}>\r\n        {this.state.movies ? this._renderMovies() : 'Loaading'}\r\n        {/* Movie는 현 싸이클의 현재 엘리먼트를 의미 */}\r\n        {/* {this.state.movies.map((movie, index) => {\r\n          return <Movie title={movie.title} releaseDate={movie.releaseDate} poster={movie.poster} key={index} />\r\n        })} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}